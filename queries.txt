Task 1
-----------
create table yelp_dataset_raw(data string);
load data local inpath '/home/vm4learning/Desktop/Yelp_dataset1.json' into table yelp_dataset_raw;

create table yelp_dataset
row format delimited fields terminated by ','
stored as orc 
-- we can use different file formats, it can be textfile or sequencefile or rcfile or  orcfile or avro or parquet.
-- If your data is delimited by some parameters then you can use TEXTFILE format.
-- If your data is in small files whose size is less than the block size then you can use SEQUENCEFILE format.
-- If you want to perform analytics on your data and you want to store your data efficiently for that then you can use RCFILE format.
-- If you want to store your data in an optimized way which lessens your storage and increases your performance then you can use ORCFILE format.
-- Avro is a Row based format. If you want to retrieve the data as a whole you can use Avro
-- Parquet is a Column based format. If your data consists of lot of columns but you are interested in a subset of columns then you can use Parquet

as 
select
x.user_id, x.review_id, x.stars, x.dateid, x.text_data, size(split((regexp_replace(x.text_data, ',\n', '')),'')) word_count, x.type, x.business_id,
get_json_object(votes, '$.funny') as funny,
get_json_object(votes, '$.useful') as useful,
get_json_object(votes, '$.cool') as cool 
from yelp_dataset_raw  lateral view json_tuple(data, 'user_id', 'review_id', 'stars', 'date', 'text', 'type', 'business_id', 'votes') x as user_id, review_id, stars, dateid, text_data, type, business_id, votes;

Task 2
-----------

# Top 10 users whose reviews were voted funny and stored in sequential file format.

create table top_review_funny
row format delimited fields terminated by ','
stored as orc
as
select user_id,funny from yelp_dataset sort by funny desc limit 10;

# Top 10 users whose reviews were voted useful and stored in sequential file format.

create table top_review_useful
row format delimited fields terminated by ','
stored as orc
as
select user_id,useful from yelp_dataset sort by useful desc limit 10;

# Top 10 users whose reviews were voted cool and stored in sequential file format.

create table top_review_cool
row format delimited fields terminated by ','
stored as orc
as
select user_id,cool from yelp_dataset sort by cool desc limit 10;

# Top 10 users that gave verbose reviews and stored in sequential file format.

create table top_verbose
row format delimited fields terminated by ','
stored as orc
as
select user_id,word_count from yelp_dataset sort by word_count desc limit 10;



Queries related to 4 approaches
-----------------------------------

Approach 1
---------

select user_id, review_id, stars, dateid, text_data, size(split(text_data, ' ')) word_count, type, business_id, funny, useful, cool from
(select get_json_object(data, '$.user_id') as user_id,
get_json_object(data, '$.review_id') as review_id,
get_json_object(data, '$.stars') as stars,
get_json_object(data, '$.date') as dateid,
get_json_object(data, '$.text') as text_data,
get_json_object(data, '$.type') as type,
get_json_object(data, '$.business_id') as business_id,
get_json_object(data, '$.votes.funny') as funny,
get_json_object(data, '$.votes.useful') as useful,
get_json_object(data, '$.votes.cool') as cool
from raw ) aa;


Approach 2 (a)
----------

select user_id, review_id, stars, dateid, text_data, size(split(text_data, ' ')) word_count, type, business_id,
get_json_object(votes, '$.funny') as funny, 
get_json_object(votes, '$.useful') as useful, 
get_json_object(votes, '$.cool') as cool
from (
select x.* from raw lateral view json_tuple(data, 'user_id', 'review_id', 'stars', 'date', 'text', 'type', 'business_id', 'votes') x as user_id, review_id, stars, dateid, text_data, type, business_id, votes
) aa;

Approach 2 (b)
----------
select x.user_id, x.review_id, x.stars,x.dateid, x.text_data, size(split(x.text_data, ' ')) word_count, x.type, x.business_id,
get_json_object(votes, '$.funny') as funny,
get_json_object(votes, '$.useful') as useful,
get_json_object(votes, '$.cool') as cool 
from raw lateral view json_tuple(data, 'user_id', 'review_id', 'stars', 'date', 'text', 'type', 'business_id', 'votes') x 
as user_id, review_id, stars, dateid, text_data, type, business_id, votes;


Approach 3
----------
select user_id, review_id, stars, dateid, text_data, size(split(text_data, ' ')) word_count, type, business_id, b.* 
from
(
select a.* from raw lateral view json_tuple(data, 'user_id', 'review_id', 'stars', 'date', 'text', 'type', 'business_id', 'votes') a as user_id, review_id, stars, dateid, text_data, type, business_id, votes
) aa lateral view json_tuple(votes, 'funny', 'useful', 'cool') b as funny, useful, cool;

Approach 4
----------
create table yelp_dataset (
  user_id string,
  review_id string,
  stars int,
  dateid string,
  text_data string,
  word_count int,
  type string,
  business_id string,
  votes struct<funny:int, useful:int, cool:int>
)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerde';

load data local inpath '/home/vm4learning/Desktop/Yelp_dataset_raw.json' into table yelp_dataset;

select user_id, review_id, stars, dateid, text_data, size(split(text_data, ' ')) word_count, type, business_id, votes.funny, 
votes.useful, votes.cool
from yelp_dataset_raw
